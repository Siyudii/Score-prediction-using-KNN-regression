# -*- coding: utf-8 -*-
"""Score Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wCPCh2Ks0oGHuDZx2-VmgDwhsihaloiC

##Importing Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""##Importing Datasets"""

dataset = pd.read_csv('nba_2013.csv',usecols=['age', 'g', 'gs', 'mp', 'fg', 'fga', 'fg.', 'x3p',
 'x3pa', 'x3p.', 'x2p', 'x2pa', 'x2p.', 'efg.', 'ft', 'fta', 'ft.', 'orb', 'drb', 'trb', 'ast', 'stl', 'blk', 'tov', 'pf', 'pts'])
x = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

"""##Spilitting into test and training sets"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)

"""##Checking for missing data"""

array_sum = np.sum(x_train)
array_has_nan = np.isnan(array_sum)
print(array_has_nan)

"""##Taking care of missing data"""

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(x_train[:,0:25])
x_train[:,0:25]=imputer.transform(x_train[:,0:25])
x_test[:,0:25]=imputer.transform(x_test[:,0:25])

array_sum = np.sum(x_train)
array_has_nan = np.isnan(array_sum)
print(array_has_nan)

"""##Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train[:, :] = sc.fit_transform(x_train[:, :])
x_test[:, :] = sc.transform(x_test[:, :])

"""## Finding out how many neighbours are giving the best score"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import accuracy_score,mean_squared_log_error,r2_score
from math import sqrt
reg_score = []
# print(mean_squared_error(y_train,y_train,squared = False))
for K in range(20):
    K = K+1
    model = KNeighborsRegressor(n_neighbors = K)

    model.fit(x_train, y_train) 
    pred=model.predict(x_test) 
    print ("For K:",K, ", regression score is:",format(r2_score(y_test, pred),'.4f'))
    reg_score.append(r2_score(y_test, pred))
curve = pd.DataFrame(reg_score) 
curve.plot()

"""## k=7 gives us highest regression score, improving that score with some parameters"""

knn = KNeighborsRegressor(n_neighbors = 7,weights='distance')
knn.fit(x_train, y_train) 
y_pred = knn.predict(x_test)
print ("Regression score is:", format(r2_score(y_test, y_pred)*100,'.4f'),"%")
print ("Mean Squared Error is:", format(sqrt(mean_squared_log_error(y_test, y_pred)), '.7f'))

comparison = pd.DataFrame({'Actual Points': y_test, 'Predicted Points': y_pred})
comparison